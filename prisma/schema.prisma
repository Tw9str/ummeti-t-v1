generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  email          String   @unique
  emailVerified  DateTime?
  name           String
  role           String   @default("user")
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  projects       Project[]
  categories     Category[]
  posts          Post[]
  accounts       Account[]
  sessions       Session[]
}

model Category {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        Json
  userId       String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  projects     Project[]
  user         User     @relation(fields: [userId], references: [id])
}

model Project {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        Json
  description  Json
  raised       Float
  goal         Float
  slug         String   @unique
  categoryId   String   @db.ObjectId
  userId       String   @db.ObjectId
  images       String[]
  isMain       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  slugs        ProjectSlug[]
  user         User     @relation(fields: [userId], references: [id])
  category     Category @relation(fields: [categoryId], references: [id])
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       Json
  description Json
  images      String[]
  slug        String   @unique
  userId      String   @db.ObjectId
  isMain      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  slugs       PostSlug[]
  user        User     @relation(fields: [userId], references: [id])
}

model ProjectSlug {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  slug       String
  locale     String
  projectId  String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  project    Project  @relation(fields: [projectId], references: [id])

  @@unique([slug, locale, projectId])
}

model PostSlug {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  slug      String
  locale    String
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([slug, locale, postId])
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String?
  phone     String?
  location  String?
  address   String?
  youtube   Json?
  twitter   Json?
  instagram Json?
  facebook  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName   String
  lastName    String
  text        String
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Stats {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  projects   Int?
  supporters Int?
  served     Int?
  isAuto     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
